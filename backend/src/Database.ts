//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { UsersEntity } from './db/Users.entity';
import { CalculationsEntity } from './db/Calculations.entity';
import { OperationsEntity } from './db/Operations.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      UsersEntity,
      CalculationsEntity,
      OperationsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Users: [
        {
          username: 'username 1',
          email: 'email 1',
          password: 'password 1',
          id: 66,
        },
        {
          username: 'username 2',
          email: 'email 2',
          password: 'password 2',
          id: 44,
        },
        {
          username: 'username 3',
          email: 'email 3',
          password: 'password 3',
          id: 78,
        },
        {
          username: 'username 4',
          email: 'email 4',
          password: 'password 4',
          id: 38,
        },
        {
          username: 'username 5',
          email: 'email 5',
          password: 'password 5',
          id: 85,
        },
      ],
      Calculations: [
        { operationPerformed: 1, result: 0.84, user: 1, id: 34 },
        { operationPerformed: 2, result: 0.79, user: 2, id: 93 },
        { operationPerformed: 3, result: 0.94, user: 3, id: 87 },
        { operationPerformed: 4, result: 0.09, user: 4, id: 94 },
        { operationPerformed: 5, result: 0.03, user: 5, id: 67 },
      ],
      Operations: [
        {
          operationName: 'operationName 1',
          symbolicRepresentation: 'symbolicRepresentation 1',
          id: 31,
        },
        {
          operationName: 'operationName 2',
          symbolicRepresentation: 'symbolicRepresentation 2',
          id: 55,
        },
        {
          operationName: 'operationName 3',
          symbolicRepresentation: 'symbolicRepresentation 3',
          id: 12,
        },
        {
          operationName: 'operationName 4',
          symbolicRepresentation: 'symbolicRepresentation 4',
          id: 3,
        },
        {
          operationName: 'operationName 5',
          symbolicRepresentation: 'symbolicRepresentation 5',
          id: 20,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('CalculationsEntity', data.Calculations);
      await this.SeedResource('OperationsEntity', data.Operations);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
